/*------- save_as.mac ---------

Result representation in form,
available for other programs.

  2021, Stanislav Mikhel
------------------------------*/

load(stringproc)$

/* Use pow() in C */
matchdeclare(_var1_, all, _var2_, all)$
defrule(usepow, _var1_ ^ _var2_, pow(_var1_, _var2_))$

/* Export variable for C code */
save_as_c(name,expr) := block(
  [ f, R, C, r, c ],
  f : openw(sconcat(name,"_var.c")),
  /* reminder */
  printf(f, "/* Variables ~{~a ~}*/~%", listofvars(expr)), 
  /* prepare */
  expr : apply1(float(expr), usepow),
  if matrixp(expr) then (
    /* matrix */
    R : length(expr), C : length(expr[1]),
    printf(f, "double ~a[~d][~d];~%", name, R, C),
    for r : 1 thru R do (
      for c : 1 thru C do 
        printf(f, "~a[~d][~d] = ~a;~%", name, r-1, c-1, string(expr[r][c]))
    )
  ) elseif listp(expr) then (
    /* list */
    R : length(expr),
    printf(f, "double ~a[~d];~%", name, R),
    for r : 1 thru R do 
      printf(f, "~a[~d] = ~a;~%", name, r-1, string(expr[r]))
  ) else (
    /* simple expression */
    printf(f, "double ~a = ~a;~%", name, string(expr))
  ), 
  close(f)
)$

/* Export variable for matlab code */
save_as_matlab(name,expr) := block (
  [ f, R, C, r, c ],
  f : openw(sconcat("get_",name,".m")),
  /* title */ 
  R : listofvars(expr), /* variables, reuse */
  printf(f, "functoin ~a = get_~a(~a~{,~a~})~%", 
          name, name, first(R), rest(R)), 
  /* prepare */
  expr : float(expr),
  if matrixp(expr) then (
    R : length(expr), C : length(expr[1]),
    printf(f, "  ~a = zeros(~d,~d);~%", name, R, C),
    for r : 1 thru R do (
      for c : 1 thru C do 
        printf(f, "  ~a(~d,~d) = ~a;~%", name, r, c, expr[r][c])
    )
  ) elseif listp(expr) then (
    R : length(expr),
    printf(f, "  ~a = zeros(1,~d);~%", name, R),
    for r : 1 thru R do 
      printf(f, "  ~a(~d) = ~a;~%", name, r, string(expr[r]))
  ) else (
    /* simple expression */
    printf(f, "  ~a = ~a;~%", name, string(expr))
  ), 
  printf(f, "end ~%"), 
  close(f)
)$

