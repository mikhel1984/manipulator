/*------- rotations.mac -----

Description of orientation.

  2021, Stanislav Mikhel
-----------------------------*/

/* X axis */
Rx(q) := block(
  [c : cos(q), s : sin(q)],
  matrix([1,0,0], [0,c,-s], [0,s,c])
)$
/* Y axis */
Ry(q) := block(
  [c : cos(q), s : sin(q)],
  matrix([c,0,s], [0,1,0], [-s,0,c])
)$
/* Z axis */
Rz(q) := block(
  [c : cos(q), s : sin(q)],
  matrix([c,-s,0], [s,c,0], [0,0,1])
)$

/* Axis - angle */
/* Represent as '[kx,ky,kz], q' */
R_AA(k,q) := block(
  [c : cos(q), s : sin(q), v],
  v : 1 - c,
  matrix(
    [k[1]^2*v+c, k[1]*k[2]*v-k[3]*s, k[1]*k[3]*v+k[2]*s],
    [k[1]*k[2]*v+k[3]*s, k[2]^2*v+c, k[2]*k[3]*v-k[1]*s],
    [k[1]*k[3]*v-k[2]*s, k[2]*k[3]*v+k[1]*s, k[3]^2*v+c])
)$

/* Unit quaternion */
/* Represent as [w,i,j,k] */
R_Qu(q) := 
  matrix(
    [    1-2*(q[3]^2+q[4]^2), 2*(q[2]*q[3]-q[4]*q[1]), 2*(q[2]*q[4]+q[3]*q[1])],
    [2*(q[2]*q[3]+q[4]*q[1]),     1-2*(q[2]^2+q[4]^2), 2*(q[3]*q[4]-q[2]*q[1])],
    [2*(q[2]*q[4]-q[3]*q[1]), 2*(q[3]*q[4]+q[2]*q[1]),     1-2*(q[2]^2+q[3]^2)])$

/* Euler angles */
R_XYZ(a,b,c) := Rx(a) . Ry(b) . Rz(c)$ 
R_XYX(a,b,c) := Rx(a) . Ry(b) . Rx(c)$
R_XZX(a,b,c) := Rx(a) . Rz(b) . Rx(c)$
R_XZY(a,b,c) := Rx(a) . Rz(b) . Ry(c)$
R_YXY(a,b,c) := Ry(a) . Rx(b) . Ry(c)$
R_YXZ(a,b,c) := Ry(a) . Rx(b) . Rz(c)$
R_YZX(a,b,c) := Ry(a) . Rz(b) . Rx(c)$
R_YZY(a,b,c) := Ry(a) . Rz(b) . Ry(c)$
R_ZXY(a,b,c) := Rz(a) . Rx(b) . Ry(c)$
R_ZXZ(a,b,c) := Rz(a) . Rx(b) . Rz(c)$
R_ZYX(a,b,c) := Rz(a) . Ry(b) . Rx(c)$  
R_ZYZ(a,b,c) := Rz(a) . Ry(b) . Rz(c)$

/* Roll - pitch - yaw */
R_RPW(r,p,w) := R_ZYX(r,p,w)$

_euler_ang(as,ac,bs1,bc1,bs2,bc2,cs,cc) := 
  [[atan2(as,ac), atan2(bs1,bc1), atan2(cs,cc)],
   [atan2(-as,-ac), atan2(bs2,bc2), atan2(-cs,-cc)]]$

/* Rotation matrix to Euler angles */
R2Euler(fn,m) := block(
  [ %1, %2 : [] ],
  if is(fn=R_XYZ) then (
    if is(m[2][3]#0) or is(m[3][3]#0) then (
      %1 : sqrt(1-m[1][3]^2),
      %2 : _euler_ang(-m[2][3],m[3][3],m[1][3],%1,m[1][3],-%1,-m[1][2],m[1][1])
    )
  ) elseif is(fn=R_XYX) then (
    if is(m[1][2]#0) or is(m[1][3]#0) then (
      %1 : sqrt(1-m[1][1]^2),
      %2 : _euler_ang(m[2][1],-m[3][1],%1,m[1][1],-%1,m[1][1],m[1][2],m[1][3])
    )
  ) elseif is(fn=R_XZX) then (
    if is(m[1][2]#0) or is(m[1][3]) then (
      %1 : sqrt(1-m[1][1]^2),
      %2 : _euler_ang(m[3][1],m[2][1],%1,m[1][1],-%1,m[1][1],m[1][3],-m[1][2])
    )
  ) elseif is(fn=R_XZY) then (
    if is(m[1][1]#0) or is(m[1][3]#0) then (
      %1 : sqrt(1-m[1][2]^2),
      %2 : _euler_ang(m[3][2],m[2][2],-m[1][2],%1,-m[1][2],-%1,m[1][3],m[1][1])
    )
  ) elseif is(fn=R_YXY) then (
    if is(m[2][1]#0) or is(m[2][3]#0) then (
      %1 : sqrt(1-m[2][2]^2),
      %2 : _euler_ang(m[1][2],m[3][2],%1,m[2][2],-%1,m[2][2],m[2][1],-m[2][3])
    )
  ) elseif is(fn=R_YXZ) then (
    if is(m[2][1]#0) or is(m[2][2]#0) then (
      %1 : sqrt(1-m[2][3]^2), 
      %2 : _euler_ang(m[1][3],m[3][3],-m[2][3],%1,-m[2][3],-%1,m[2][1],m[2][2])
    )
  ) elseif is(fn=R_YZX) then (
    if is(m[2][2]#0) or is(m[2][3]#0) then (
      %1 : sqrt(1-m[2][1]^2),
      %2 : _euler_ang(-m[3][1],m[1][1],m[2][1],%1,m[2][1],-%1,-m[2][3],m[2][2])
    )
  ) elseif is(fn=R_YZY) then (
    if is(m[2][1]#0) or is(m[2][3]#0) then (
      %1 : sqrt(1-m[2][2]^2),
      %2 : _euler_ang(m[3][2],-m[1][2],%1,m[2][2],-%1,m[2][2],m[2][3],m[2][1])
    )
  ) elseif is(fn=R_ZXY) then (
    if is(m[3][1]#0) or is(m[3][3]#0) then (
      %1 : sqrt(1-m[3][2]^2),
      %2 : _euler_ang(-m[1][2],m[2][2],m[3][2],%1,m[3][2],-%1,-m[3][1],m[3][3])
    )
  ) elseif is(fn=R_ZXZ) then (
    if is(m[3][1]#0) or is(m[3][2]#0) then (
      %1 : sqrt(1-m[3][3]^2),
      %2 : _euler_ang(m[1][3],-m[2][3],%1,m[3][3],-%1,m[3][3],m[3][1],m[3][2])
    )
  ) elseif is(fn=R_ZYX) or is(fn=R_RPW) then (
    if is(m[3][2]#0) or is(m[3][3]#0) then (
      %1 : sqrt(1-m[3][1]^2),
      %2 : _euler_ang(m[2][1],m[1][1],-m[3][1],%1,-m[3][1],-%1,m[3][2],m[3][3])
    )
  ) elseif is(fn=R_ZYZ) then (
    if is(m[3][1]#0) or is(m[3][2]#0) then (
      %1 : sqrt(1-m[3][3]^2),
      %2 : _euler_ang(m[2][3],m[1][3],%1,m[3][3],-%1,m[3][3],m[3][2],-m[3][1])
    )
  ),
  %2
)$

/* Rotation matrix to quaternion */
R2Qu(m) := block(
   [ %1 ],
   if is(m[1][1]+m[2][2]+m[3][3] > 0) then (
      %1 : 2*sqrt(1+m[1][1]+m[2][2]+m[3][3]),
      [%1/4, (m[3][2]-m[2][3])/%1, (m[1][3]-m[3][1])/%1, (m[2][1]-m[1][2])/%1]
   ) elseif is(m[1][1] > m[2][2]) and is(m[1][1] > m[3][3]) then (
      %1 : 2*sqrt(1+m[1][1]-m[2][2]-m[3][3]),
      [(m[3][2]-m[2][3])/%1, %1/4, (m[1][2]+m[2][1])/%1, (m[1][3]+m[3][1])/%1]
   ) elseif is(m[2][2] > m[3][3]) then (
      %1 : 2*sqrt(1+m[2][2]-m[1][1]-m[3][3]),
      [(m[1][3]-m[3][1])/%1, (m[1][2]+m[2][1])/%1, %1/4, (m[2][3]+m[3][2])/%1]
   ) else (
      %1 : 2*sqrt(1+m[3][3]-m[1][1]-m[2][2]),
      [(m[2][1]-m[1][2])/%1, (m[1][3]+m[3][1])/%1, (m[2][3]+m[3][2])/%1, %1/4]
   )
)$

_sgn(x) := if x > 0 then 1 else -1$

/* Rotation matrix to axis - angle */
R2AA(m) := block(
  [ c : (m[1][1]+m[2][2]+m[3][3]-1)/2, s, v ],
  s : sqrt((m[3][2]-m[2][3])^2+(m[1][3]-m[3][1])^2+(m[2][1]-m[1][2])^2)/2,
  if is(c=1) or is(c=-1) then (
    []
  ) elseif is(c >= 0) then (
    [[[(m[3][2]-m[2][3]),(m[1][3]-m[3][1]),(m[2][1]-m[1][2])]/(2*s), atan2(s,c)],
     [[(m[3][2]-m[2][3]),(m[1][3]-m[3][1]),(m[2][1]-m[1][2])]/(-2*s), atan2(-s,c)]]
  ) else (
    v : 1 - c,
    [[[_sgn(m[3][2]-m[2][3])*sqrt((m[1][1]-c)/v),_sgn(m[1][3]-m[3][1])*sqrt((m[2][2]-c)/v),
         _sgn(m[2][1]-m[1][2])*sqrt((m[3][3]-c)/v)], atan2(s,c)],
     [[_sgn(m[2][3]-m[3][2])*sqrt((m[1][1]-c)/v),_sgn(m[3][1]-m[1][3])*sqrt((m[2][2]-c)/v),
         _sgn(m[1][2]-m[2][1])*sqrt((m[3][3]-c)/v)], atan2(-s,c)]]
  )
)$

/* Quaternion from axis - angle */
/* Axis - angle is '[kx,ky,kz], q' */
/* Quaternion is [w,i,j,k] */
Qu_AA(k,q) := block(
  [ %1 : q/2, %2 ],
  %2 : sin(%1),
  [cos(%1), k[1]*%2, k[2]*%2, k[3]*%2]
)$

/* Quaternion to axis - angle */
Qu2AA(q) := block(
  [ %1 : sqrt(1 - q[1]*q[1]),
    %2 : 2*acos(q[1]) ],
  if is(%1  < 0.001) then (
    [[1, 0, 0], %2]
  ) else (
    [[q[2]/%1, q[3]/%1, q[4]/%1], %2]
  )
)$
